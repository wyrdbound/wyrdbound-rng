name: Code Quality

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  code-quality:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv .venv

      - name: Install dependencies
        run: |
          source .venv/bin/activate
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          # Install additional code quality tools
          pip install safety mypy
        shell: bash

      - name: Run Ruff linting
        run: |
          source .venv/bin/activate
          echo "::group::Ruff Check"
          ruff check src/ tests/ tools/ --output-format=github
          echo "::endgroup::"
        shell: bash

      - name: Run Ruff formatting check
        run: |
          source .venv/bin/activate
          echo "::group::Ruff Format Check"
          ruff format --check src/ tests/ tools/
          echo "::endgroup::"
        shell: bash

      - name: Run dependency security check
        run: |
          source .venv/bin/activate
          echo "::group::Dependency Security Check"
          safety check --json || true
          safety check
          echo "::endgroup::"
        shell: bash
        continue-on-error: true

      - name: Run type checking with mypy
        run: |
          source .venv/bin/activate
          echo "::group::Type Checking"
          mypy src/wyrdbound_rng/ --ignore-missing-imports --no-strict-optional || true
          echo "::endgroup::"
        shell: bash
        continue-on-error: true

      - name: Check import sorting
        run: |
          source .venv/bin/activate
          echo "::group::Import Sorting Check"
          ruff check --select I src/ tests/ tools/
          echo "::endgroup::"
        shell: bash

      - name: Run complexity analysis
        run: |
          source .venv/bin/activate
          echo "::group::Complexity Analysis"
          ruff check --select C901 src/ || true
          echo "::endgroup::"
        shell: bash
        continue-on-error: true

      - name: Check for potential bugs
        run: |
          source .venv/bin/activate
          echo "::group::Bug Detection"
          ruff check --select B src/ tests/ tools/
          echo "::endgroup::"
        shell: bash

      - name: Check code style consistency
        run: |
          source .venv/bin/activate
          echo "::group::Code Style Consistency"
          ruff check --select E,W src/ tests/ tools/
          echo "::endgroup::"
        shell: bash

      - name: Generate quality report summary
        run: |
          source .venv/bin/activate
          echo "::group::Quality Report Summary"
          echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count Python files
          PYTHON_FILES=$(find src/ tests/ tools/ -name "*.py" | wc -l)
          echo "- **Python files analyzed:** $PYTHON_FILES" >> $GITHUB_STEP_SUMMARY

          # Run ruff and capture stats
          ruff check src/ tests/ tools/ --statistics 2>/dev/null | head -10 >> $GITHUB_STEP_SUMMARY || true

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security and Dependencies" >> $GITHUB_STEP_SUMMARY

          # Safety check summary
          if safety check --json >/dev/null 2>&1; then
            echo "- ✅ No known security vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ Potential security issues detected (see logs)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "::endgroup::"
        shell: bash
